services:
  read:
    image: grafana/loki:3.1.2
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      microservicesbanks:
        aliases:
          - loki
    environment:
      - OTEL_SERVICE_NAME=read

  write:
    image: grafana/loki:3.1.2
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns
    environment:
      - OTEL_SERVICE_NAME=write

  alloy:
    image: grafana/alloy:v1.5.1
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      - microservicesbanks
    environment:
      - OTEL_SERVICE_NAME=alloy

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
      - OTEL_SERVICE_NAME=minio
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - microservicesbanks

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus_data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - microservicesbanks
    environment:
      - OTEL_SERVICE_NAME=prometheus

  tempo:
    image: grafana/tempo:2.6.1
    container_name: tempo
    command:
      - "--config.file=/etc/tempo-config.yaml"
    user: root
    ports:
      - "3110:3100"
      - "4317:4317"
      - "4318:4318"
    volumes:
      - ../observability/tempo/tempo.yaml:/etc/tempo-config.yaml
      - tempo_data:/tmp/tempo
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      microservicesbanks:
        aliases:
          - tempo
    environment:
      - OTEL_SERVICE_NAME=tempo

  grafana:
    image: grafana/grafana:11.4.0
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - OTEL_SERVICE_NAME=grafana
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservicesbanks

  backend:
    image: grafana/loki:3.1.2
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - microservicesbanks
    environment:
      - OTEL_SERVICE_NAME=backend

  gateway:
    image: nginx:1.27.3
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservicesbanks
    environment:
      - OTEL_SERVICE_NAME=gateway

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      timeout: 20s
      retries: 20
    networks:
      - microservicesbanks
    environment:
      - OTEL_SERVICE_NAME=redis

  accountsdb:
    image: mysql
    container_name: accountsdb
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 10s
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=accountsdb
      - OTEL_SERVICE_NAME=accountsdb
    networks:
      - microservicesbanks

  loansdb:
    image: mysql
    container_name: loansdb
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 60s
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=loansdb
      - OTEL_SERVICE_NAME=loansdb
    networks:
      - microservicesbanks

  cardsdb:
    image: mysql
    container_name: cardsdb
    ports:
      - "3308:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 60s
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=cardsdb
      - OTEL_SERVICE_NAME=cardsdb
    networks:
      - microservicesbanks

  accounts:
    build:
      context: ../../accounts
      dockerfile: Dockerfile
    image: "rudro77/accounts:0.0.1-SNAPSHOT"
    container_name: accounts-ms
    ports:
      - "8080:8080"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      accountsdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservicesbanks
    environment:
      - SPRING_APPLICATION_NAME=accounts
      - SPRING_CONFIG_IMPORT=configserver:http://configserver:8071/
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_DATASOURCE_URL=jdbc:mysql://accountsdb:3306/accountsdb
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eurekaserver-ms:8070/eureka
      - OTEL_SERVICE_NAME=accounts
      - JAVA_TOOL_OPTIONS=-javaagent:/app/libs/opentelemetry-javaagent-1.27.0.jar
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_TRACES_SAMPLER=parentbased_always_on

  loans:
    build:
      context: ../../loans
      dockerfile: Dockerfile
    image: "rudro77/loans:0.0.1-SNAPSHOT"
    container_name: loans-ms
    ports:
      - "8090:8090"
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      loansdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservicesbanks
    environment:
      - SPRING_APPLICATION_NAME=loans
      - SPRING_CONFIG_IMPORT=configserver:http://configserver:8071/
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_DATASOURCE_URL=jdbc:mysql://loansdb:3306/loansdb
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eurekaserver-ms:8070/eureka
      - OTEL_SERVICE_NAME=loans
      - JAVA_TOOL_OPTIONS=-javaagent:/app/libs/opentelemetry-javaagent-1.27.0.jar
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_TRACES_SAMPLER=parentbased_always_on

  cards:
    build:
      context: ../../cards
      dockerfile: Dockerfile
    image: "rudro77/cards:0.0.1-SNAPSHOT"
    container_name: cards-ms
    ports:
      - "9000:9000"
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      cardsdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservicesbanks
    environment:
      - SPRING_APPLICATION_NAME=cards
      - SPRING_CONFIG_IMPORT=configserver:http://configserver:8071/
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_DATASOURCE_URL=jdbc:mysql://cardsdb:3306/cardsdb
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eurekaserver-ms:8070/eureka
      - OTEL_SERVICE_NAME=cards
      - JAVA_TOOL_OPTIONS=-javaagent:/app/libs/opentelemetry-javaagent-1.27.0.jar
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_TRACES_SAMPLER=parentbased_always_on

  gatewayserver:
    build:
      context: ../../cards
      dockerfile: Dockerfile
    image: "rudro77/gatewayserver:0.0.1-SNAPSHOT"
    container_name: gatewayserver-ms
    ports:
      - "8072:8072"
    depends_on:
      accounts:
        condition: service_healthy
      loans:
        condition: service_healthy
      cards:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      configserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservicesbanks
    environment:
      - SPRING_APPLICATION_NAME=gatewayserver
      - SPRING_CONFIG_IMPORT=configserver:http://configserver:8071/
      - SPRING_PROFILES_ACTIVE=default
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eurekaserver-ms:8070/eureka
      - SPRING_DATA_REDIS_CONNECT_TIMEOUT=2s
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_REDIS_TIMEOUT=1s
      - OTEL_SERVICE_NAME=gatewayserver
      - JAVA_TOOL_OPTIONS=-javaagent:/app/libs/opentelemetry-javaagent-1.27.0.jar
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_TRACES_SAMPLER=parentbased_always_on

  eurekaserver:
    build:
      context: ../../configserver
      dockerfile: Dockerfile
    image: "rudro77/eurekaserver:0.0.1-SNAPSHOT"
    container_name: eurekaserver-ms
    ports:
      - "8070:8070"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservicesbanks
    environment:
      - SPRING_APPLICATION_NAME=eurekaserver
      - SPRING_CONFIG_IMPORT=configserver:http://configserver:8071/
      - EUREKA_HOST=eurekaserver-ms
      - OTEL_SERVICE_NAME=eurekaserver
      - JAVA_TOOL_OPTIONS=-javaagent:/app/libs/opentelemetry-javaagent-1.27.0.jar
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_TRACES_SAMPLER=parentbased_always_on

  configserver:
    build:
      context: ../../configserver
      dockerfile: Dockerfile
    image: "rudro77/configserver:0.0.1-SNAPSHOT"
    container_name: configserver-ms
    ports:
      - "8071:8071"
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservicesbanks
    environment:
      - OTEL_SERVICE_NAME=configserver
      - JAVA_TOOL_OPTIONS=-javaagent:/app/libs/opentelemetry-javaagent-1.27.0.jar
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_TRACES_SAMPLER=parentbased_always_on

volumes:
  prometheus_data:
  tempo_data:
    driver: local

networks:
  microservicesbanks:
    driver: "bridge"
